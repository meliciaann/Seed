'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Seed")>  _
Partial Public Class ItemsEditDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertItem(instance As Item)
    End Sub
  Partial Private Sub UpdateItem(instance As Item)
    End Sub
  Partial Private Sub DeleteItem(instance As Item)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.SeedGeneral.My.MySettings.Default.SeedConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Items() As System.Data.Linq.Table(Of Item)
		Get
			Return Me.GetTable(Of Item)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Items")>  _
Partial Public Class Item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Item As String
	
	Private _Lot As String
	
	Private _PLS_ As System.Nullable(Of Decimal)
	
	Private _variety As String
	
	Private _Purity As System.Nullable(Of Decimal)
	
	Private _Crop As System.Nullable(Of Decimal)
	
	Private _Inert As System.Nullable(Of Decimal)
	
	Private _Weeds As System.Nullable(Of Decimal)
	
	Private _Germ As System.Nullable(Of Decimal)
	
	Private _Dormant As System.Nullable(Of Decimal)
	
	Private _Total As System.Nullable(Of Decimal)
	
	Private _Test_Date As System.Nullable(Of Date)
	
	Private _Orgin As String
	
	Private _Distributor As System.Nullable(Of Decimal)
	
	Private _Wholesale As System.Nullable(Of Decimal)
	
	Private _Retail As System.Nullable(Of Decimal)
	
	Private _ReorderQTY As System.Nullable(Of Decimal)
	
	Private _Reorder As System.Nullable(Of Boolean)
	
	Private _Discontinued As System.Nullable(Of Boolean)
	
	Private _ScientificName As String
	
	Private _ItemID As Integer
	
	Private _Type As String
	
	Private _BotanicalName As String
	
	Private _NoxiousWeeds As String
	
	Private _QBListID As String
	
	Private _AvailableInventory As System.Nullable(Of Decimal)
	
	Private _ItemGroupID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnItemChanging(value As String)
    End Sub
    Partial Private Sub OnItemChanged()
    End Sub
    Partial Private Sub OnLotChanging(value As String)
    End Sub
    Partial Private Sub OnLotChanged()
    End Sub
    Partial Private Sub OnPLS_Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPLS_Changed()
    End Sub
    Partial Private Sub OnvarietyChanging(value As String)
    End Sub
    Partial Private Sub OnvarietyChanged()
    End Sub
    Partial Private Sub OnPurityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPurityChanged()
    End Sub
    Partial Private Sub OnCropChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCropChanged()
    End Sub
    Partial Private Sub OnInertChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnInertChanged()
    End Sub
    Partial Private Sub OnWeedsChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnWeedsChanged()
    End Sub
    Partial Private Sub OnGermChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGermChanged()
    End Sub
    Partial Private Sub OnDormantChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDormantChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnTest_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTest_DateChanged()
    End Sub
    Partial Private Sub OnOrginChanging(value As String)
    End Sub
    Partial Private Sub OnOrginChanged()
    End Sub
    Partial Private Sub OnDistributorChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDistributorChanged()
    End Sub
    Partial Private Sub OnWholesaleChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnWholesaleChanged()
    End Sub
    Partial Private Sub OnRetailChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRetailChanged()
    End Sub
    Partial Private Sub OnReorderQTYChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnReorderQTYChanged()
    End Sub
    Partial Private Sub OnReorderChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnReorderChanged()
    End Sub
    Partial Private Sub OnDiscontinuedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDiscontinuedChanged()
    End Sub
    Partial Private Sub OnScientificNameChanging(value As String)
    End Sub
    Partial Private Sub OnScientificNameChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnBotanicalNameChanging(value As String)
    End Sub
    Partial Private Sub OnBotanicalNameChanged()
    End Sub
    Partial Private Sub OnNoxiousWeedsChanging(value As String)
    End Sub
    Partial Private Sub OnNoxiousWeedsChanged()
    End Sub
    Partial Private Sub OnQBListIDChanging(value As String)
    End Sub
    Partial Private Sub OnQBListIDChanged()
    End Sub
    Partial Private Sub OnAvailableInventoryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAvailableInventoryChanged()
    End Sub
    Partial Private Sub OnItemGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemGroupIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Item", DbType:="NVarChar(100)")>  _
	Public Property Item() As String
		Get
			Return Me._Item
		End Get
		Set
			If (String.Equals(Me._Item, value) = false) Then
				Me.OnItemChanging(value)
				Me.SendPropertyChanging
				Me._Item = value
				Me.SendPropertyChanged("Item")
				Me.OnItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lot", DbType:="NVarChar(100)")>  _
	Public Property Lot() As String
		Get
			Return Me._Lot
		End Get
		Set
			If (String.Equals(Me._Lot, value) = false) Then
				Me.OnLotChanging(value)
				Me.SendPropertyChanging
				Me._Lot = value
				Me.SendPropertyChanged("Lot")
				Me.OnLotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[PLS%]", Storage:="_PLS_", DbType:="Decimal(12,4)")>  _
	Public Property PLS_() As System.Nullable(Of Decimal)
		Get
			Return Me._PLS_
		End Get
		Set
			If (Me._PLS_.Equals(value) = false) Then
				Me.OnPLS_Changing(value)
				Me.SendPropertyChanging
				Me._PLS_ = value
				Me.SendPropertyChanged("PLS_")
				Me.OnPLS_Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_variety", DbType:="NVarChar(100)")>  _
	Public Property variety() As String
		Get
			Return Me._variety
		End Get
		Set
			If (String.Equals(Me._variety, value) = false) Then
				Me.OnvarietyChanging(value)
				Me.SendPropertyChanging
				Me._variety = value
				Me.SendPropertyChanged("variety")
				Me.OnvarietyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Purity", DbType:="Decimal(12,4)")>  _
	Public Property Purity() As System.Nullable(Of Decimal)
		Get
			Return Me._Purity
		End Get
		Set
			If (Me._Purity.Equals(value) = false) Then
				Me.OnPurityChanging(value)
				Me.SendPropertyChanging
				Me._Purity = value
				Me.SendPropertyChanged("Purity")
				Me.OnPurityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Crop", DbType:="Decimal(12,4)")>  _
	Public Property Crop() As System.Nullable(Of Decimal)
		Get
			Return Me._Crop
		End Get
		Set
			If (Me._Crop.Equals(value) = false) Then
				Me.OnCropChanging(value)
				Me.SendPropertyChanging
				Me._Crop = value
				Me.SendPropertyChanged("Crop")
				Me.OnCropChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inert", DbType:="Decimal(12,4)")>  _
	Public Property Inert() As System.Nullable(Of Decimal)
		Get
			Return Me._Inert
		End Get
		Set
			If (Me._Inert.Equals(value) = false) Then
				Me.OnInertChanging(value)
				Me.SendPropertyChanging
				Me._Inert = value
				Me.SendPropertyChanged("Inert")
				Me.OnInertChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weeds", DbType:="Decimal(12,4)")>  _
	Public Property Weeds() As System.Nullable(Of Decimal)
		Get
			Return Me._Weeds
		End Get
		Set
			If (Me._Weeds.Equals(value) = false) Then
				Me.OnWeedsChanging(value)
				Me.SendPropertyChanging
				Me._Weeds = value
				Me.SendPropertyChanged("Weeds")
				Me.OnWeedsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Germ", DbType:="Decimal(12,4)")>  _
	Public Property Germ() As System.Nullable(Of Decimal)
		Get
			Return Me._Germ
		End Get
		Set
			If (Me._Germ.Equals(value) = false) Then
				Me.OnGermChanging(value)
				Me.SendPropertyChanging
				Me._Germ = value
				Me.SendPropertyChanged("Germ")
				Me.OnGermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dormant", DbType:="Decimal(12,4)")>  _
	Public Property Dormant() As System.Nullable(Of Decimal)
		Get
			Return Me._Dormant
		End Get
		Set
			If (Me._Dormant.Equals(value) = false) Then
				Me.OnDormantChanging(value)
				Me.SendPropertyChanging
				Me._Dormant = value
				Me.SendPropertyChanged("Dormant")
				Me.OnDormantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Decimal(12,4)")>  _
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Test Date]", Storage:="_Test_Date", DbType:="DateTime")>  _
	Public Property Test_Date() As System.Nullable(Of Date)
		Get
			Return Me._Test_Date
		End Get
		Set
			If (Me._Test_Date.Equals(value) = false) Then
				Me.OnTest_DateChanging(value)
				Me.SendPropertyChanging
				Me._Test_Date = value
				Me.SendPropertyChanged("Test_Date")
				Me.OnTest_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orgin", DbType:="NVarChar(100)")>  _
	Public Property Orgin() As String
		Get
			Return Me._Orgin
		End Get
		Set
			If (String.Equals(Me._Orgin, value) = false) Then
				Me.OnOrginChanging(value)
				Me.SendPropertyChanging
				Me._Orgin = value
				Me.SendPropertyChanged("Orgin")
				Me.OnOrginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Distributor", DbType:="Decimal(12,4)")>  _
	Public Property Distributor() As System.Nullable(Of Decimal)
		Get
			Return Me._Distributor
		End Get
		Set
			If (Me._Distributor.Equals(value) = false) Then
				Me.OnDistributorChanging(value)
				Me.SendPropertyChanging
				Me._Distributor = value
				Me.SendPropertyChanged("Distributor")
				Me.OnDistributorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wholesale", DbType:="Decimal(12,4)")>  _
	Public Property Wholesale() As System.Nullable(Of Decimal)
		Get
			Return Me._Wholesale
		End Get
		Set
			If (Me._Wholesale.Equals(value) = false) Then
				Me.OnWholesaleChanging(value)
				Me.SendPropertyChanging
				Me._Wholesale = value
				Me.SendPropertyChanged("Wholesale")
				Me.OnWholesaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Retail", DbType:="Decimal(12,4)")>  _
	Public Property Retail() As System.Nullable(Of Decimal)
		Get
			Return Me._Retail
		End Get
		Set
			If (Me._Retail.Equals(value) = false) Then
				Me.OnRetailChanging(value)
				Me.SendPropertyChanging
				Me._Retail = value
				Me.SendPropertyChanged("Retail")
				Me.OnRetailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderQTY", DbType:="Decimal(12,4)")>  _
	Public Property ReorderQTY() As System.Nullable(Of Decimal)
		Get
			Return Me._ReorderQTY
		End Get
		Set
			If (Me._ReorderQTY.Equals(value) = false) Then
				Me.OnReorderQTYChanging(value)
				Me.SendPropertyChanging
				Me._ReorderQTY = value
				Me.SendPropertyChanged("ReorderQTY")
				Me.OnReorderQTYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reorder", DbType:="Bit")>  _
	Public Property Reorder() As System.Nullable(Of Boolean)
		Get
			Return Me._Reorder
		End Get
		Set
			If (Me._Reorder.Equals(value) = false) Then
				Me.OnReorderChanging(value)
				Me.SendPropertyChanging
				Me._Reorder = value
				Me.SendPropertyChanged("Reorder")
				Me.OnReorderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discontinued", DbType:="Bit")>  _
	Public Property Discontinued() As System.Nullable(Of Boolean)
		Get
			Return Me._Discontinued
		End Get
		Set
			If (Me._Discontinued.Equals(value) = false) Then
				Me.OnDiscontinuedChanging(value)
				Me.SendPropertyChanging
				Me._Discontinued = value
				Me.SendPropertyChanged("Discontinued")
				Me.OnDiscontinuedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScientificName", DbType:="VarChar(255)")>  _
	Public Property ScientificName() As String
		Get
			Return Me._ScientificName
		End Get
		Set
			If (String.Equals(Me._ScientificName, value) = false) Then
				Me.OnScientificNameChanging(value)
				Me.SendPropertyChanging
				Me._ScientificName = value
				Me.SendPropertyChanged("ScientificName")
				Me.OnScientificNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BotanicalName", DbType:="NVarChar(100)")>  _
	Public Property BotanicalName() As String
		Get
			Return Me._BotanicalName
		End Get
		Set
			If (String.Equals(Me._BotanicalName, value) = false) Then
				Me.OnBotanicalNameChanging(value)
				Me.SendPropertyChanging
				Me._BotanicalName = value
				Me.SendPropertyChanged("BotanicalName")
				Me.OnBotanicalNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoxiousWeeds", DbType:="NVarChar(100)")>  _
	Public Property NoxiousWeeds() As String
		Get
			Return Me._NoxiousWeeds
		End Get
		Set
			If (String.Equals(Me._NoxiousWeeds, value) = false) Then
				Me.OnNoxiousWeedsChanging(value)
				Me.SendPropertyChanging
				Me._NoxiousWeeds = value
				Me.SendPropertyChanged("NoxiousWeeds")
				Me.OnNoxiousWeedsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QBListID", DbType:="NVarChar(100)")>  _
	Public Property QBListID() As String
		Get
			Return Me._QBListID
		End Get
		Set
			If (String.Equals(Me._QBListID, value) = false) Then
				Me.OnQBListIDChanging(value)
				Me.SendPropertyChanging
				Me._QBListID = value
				Me.SendPropertyChanged("QBListID")
				Me.OnQBListIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvailableInventory", AutoSync:=AutoSync.Always, DbType:="Decimal(12,6)", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AvailableInventory() As System.Nullable(Of Decimal)
		Get
			Return Me._AvailableInventory
		End Get
		Set
			If (Me._AvailableInventory.Equals(value) = false) Then
				Me.OnAvailableInventoryChanging(value)
				Me.SendPropertyChanging
				Me._AvailableInventory = value
				Me.SendPropertyChanged("AvailableInventory")
				Me.OnAvailableInventoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemGroupID", DbType:="Int NOT NULL")>  _
	Public Property ItemGroupID() As Integer
		Get
			Return Me._ItemGroupID
		End Get
		Set
			If ((Me._ItemGroupID = value)  _
						= false) Then
				Me.OnItemGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemGroupID = value
				Me.SendPropertyChanged("ItemGroupID")
				Me.OnItemGroupIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
